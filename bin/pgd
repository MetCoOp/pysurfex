#!/usr/bin/env python3

import surfex
import sys
import argparse
import os
import json


def parse():
    """Parse the command line input arguments."""
    parser = argparse.ArgumentParser("Create physiography for SURFEX (PGD)")

    parser.add_argument('--version', action='version', version='surfex {0}'.format(surfex.__version__))
    parser.add_argument('--wrapper', '-w', type=str, default="", help="Execution wrapper command")
    parser.add_argument('--json', '-j', type=str, nargs="?", required=True, help="A JSON file with run options")
    parser.add_argument('--force', '-f', action="store_true", help="Force re-creation")
    parser.add_argument('--rte', '-r', required=True, nargs='?')
    parser.add_argument('--ecoclimap', '-e', required=True, nargs='?')
    parser.add_argument('--domain', '-d', required=True, type=str, help="JSON file with domain")
    parser.add_argument('--output', '-o', required=True, nargs='?')
    parser.add_argument('--input', '-i', required=False, default=None, nargs='?', help="JSON file with input")
    parser.add_argument('--archive', '-a', required=False, default=None, nargs='?',
                        help="JSON file with archive output")
    parser.add_argument('binary', type=str, nargs='?')

    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit()

    args = parser.parse_args()
    return args.binary, args.rte, args.wrapper, args.json, args.force, args.output, args.input, args.ecoclimap, args.domain, args.archive


if __name__ == "__main__":

    binary, rte, wrapper, json_file, force, output, input_arg, ecoclimap, domain, archive = parse()

    if os.path.exists(rte):
        my_batch = surfex.BatchJob(json.load(open(rte, "r")), wrapper=wrapper)
    else:
        raise FileNotFoundError

    if os.path.exists(domain):
        my_domain = json.load(open(domain, "r"))
    else:
        raise FileNotFoundError

    if os.path.exists(json):
        json_settings = json.load(open(json_file, "r"))
    else:
        raise FileNotFoundError

    if os.path.exists(domain):
        my_geo = surfex.json2geo(open(domain, "r"))
    else:
        raise FileNotFoundError

    if os.path.exists(ecoclimap):
        ecoclimap_file = ecoclimap
    else:
        raise FileNotFoundError

    if os.path.exists(input_arg):
        input_file = input_arg
    else:
        raise FileNotFoundError

    if os.path.exists(archive):
        my_archive = surfex.JsonOutputDataFromFile(archive)
    else:
        raise FileNotFoundError

    if not os.path.exists(output) or force:
        my_settings = surfex.ascii2nml(json_settings)
        my_geo.update_namelist(my_settings)

        print(os.getcwd())

        # Create input
        my_ecoclimap = surfex.JsonInputDataFromFile(ecoclimap_file)
        my_input = surfex.JsonInputDataFromFile(input_file)

        my_format = my_settings["nam_io_offline"]["csurf_filetype"]
        my_pgdfile = my_settings["nam_io_offline"]["cpgdfile"]
        print(my_settings)
        pgdfile = surfex.file.PGDFile(my_format, my_pgdfile, my_geo, archive_file=output)
        surfex.SURFEXBinary(binary, my_batch, pgdfile, my_settings, my_ecoclimap, input=my_input, archive=my_archive)
    else:
        print(output + " already exists!")
