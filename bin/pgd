#!/usr/bin/env python3

import surfex
import sys


if __name__ == "__main__":

    args = surfex.parse_args_surfex_binary(sys.argv[1:], "pgd")
    surfex.run_surfex_binary(args, "pgd")

'''
def parse():
    """Parse the command line input arguments."""
    parser = argparse.ArgumentParser("Create physiography for SURFEX (PGD)")

    parser.add_argument('--version', action='version', version='surfex {0}'.format(surfex.__version__))
    parser.add_argument('--wrapper', '-w', type=str, default="", required=False, help="Execution wrapper command")
    parser.add_argument('--json', '-j', type=str, required=True, help="A JSON file with run options")
    parser.add_argument('--force', '-f', action="store_true", help="Force re-creation")
    parser.add_argument('--rte', '-r', type=str, required=True)
    parser.add_argument('--ecoclimap', '-e', type=str, required=True)
    parser.add_argument('--domain', '-d', required=True, type=str, help="JSON file with domain")
    parser.add_argument('--output', '-o', required=True, type=str, nargs='?')
    parser.add_argument('--input', '-i', required=False, type=str, default=None, help="JSON file with input")
    parser.add_argument('--archive', '-a', required=False, type=str, default=None, nargs=1,
                        help="JSON file with archive output")
    parser.add_argument('binary', type=str, help="Command to run")

    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit()

    args = parser.parse_args()
    return args.binary, args.rte, args.wrapper, args.json, args.force, args.output, args.input, args.ecoclimap, \
        args.domain, args.archive


if __name__ == "__main__":

    binary, rte, wrapper, json_file, force, output, input_arg, ecoclimap, domain, archive = parse()

    print(rte)
    if os.path.exists(rte):
        my_batch = surfex.BatchJob(json.load(open(rte, "r")), wrapper=wrapper)
    else:
        raise FileNotFoundError

    if os.path.exists(json_file):
        json_settings = json.load(open(json_file, "r"))
    else:
        raise FileNotFoundError

    if os.path.exists(domain):
        my_geo = surfex.geo.get_geo_object(json.load(open(domain, "r")))
    else:
        raise FileNotFoundError

    if os.path.exists(ecoclimap):
        ecoclimap_file = ecoclimap
    else:
        raise FileNotFoundError

    my_input = None
    if input_arg is not None:
        if os.path.exists(input_arg):
            input_file = input_arg
            my_input = surfex.JsonInputDataFromFile(input_file)
        else:
            raise FileNotFoundError

    my_archive = None
    if archive is not None:
        if os.path.exists(archive):
            my_archive = surfex.JsonOutputDataFromFile(archive)
        else:
            raise FileNotFoundError

    if not os.path.exists(output) or force:
        my_settings = surfex.ascii2nml(json_settings)
        my_geo.update_namelist(my_settings)

        # Create input
        my_ecoclimap = surfex.JsonInputDataFromFile(ecoclimap_file)

        my_format = my_settings["nam_io_offline"]["csurf_filetype"]
        my_pgdfile = my_settings["nam_io_offline"]["cpgdfile"]

        pgdfile = surfex.file.PGDFile(my_format, my_pgdfile, my_geo, archive_file=output)
        surfex.SURFEXBinary(binary, my_batch, pgdfile, my_settings, my_ecoclimap, input_data=my_input,
                            archive_data=my_archive)
    else:
        print(output + " already exists!")
'''