#!/usr/bin/env python3

import json
import surfex
import argparse
import sys
import os
import toml


def parse():
    """Parse the command line input arguments."""
    parser = argparse.ArgumentParser("Creating the namelists in JSON format to be able to run SURFEX")

    parser.add_argument('--version', action='version', version='surfex {0}'.format(surfex.__version__))
    parser.add_argument('--config', '-c', type=str, nargs="?", required=False, help="Input TOML file if wanted")
    parser.add_argument('--path', '-p', type=str, nargs="?", required=True, help="Path to input settings")
    parser.add_argument('--indent', required=False, default=2, type=int, help="Indented output")
    parser.add_argument('--system', '-s', required=True, default="system.json", nargs='?', help="")
    parser.add_argument('--namelist', '-n', required=False, default="options.json", nargs='?', help="")
    parser.add_argument('--files', '-f', type=str, nargs="?", required=False, default="surfex_input_files.json",
                        help="Input json file for SURFEX binaries")
    parser.add_argument('--prep.file',  dest="prep_file", type=str, nargs="?", required=False, default=None,
                        help="Input file for PREP")
    parser.add_argument('--prep.filetype', dest="prep_filetype", type=str, nargs="?", required=False, default=None,
                        help="Input file for PREP", choices=["GRIB", "FA", "ASCII", "LFI", "NC", "json"])
    parser.add_argument('--prep.pgdfile', dest="prep_pgdfile", type=str, nargs="?", required=False, default=None,
                        help="Input PGD file for PREP input file")
    parser.add_argument('--prep.pgdfiletype', dest="prep_pgdfiletype", type=str, nargs="?", required=False, default=None,
                        help="Fileformat for PGD file provided as --prep.pgdfile", choices=["FA", "ASCII", "LFI", "NC"])
    parser.add_argument('--dtg', dest="dtg", type=str, nargs="?", required=False, default=None,
                        help="DTG (YYYYMMDDHH)")
    parser.add_argument('--forc_zs',  action="store_true", help="Set surfex orography to forcing height")

    parser.add_argument('--ecoclimap', '-e', type=str, nargs="?", required=False, default="ecoclimap.json",
                        help="Input ecoclimap json file for SURFEX binaries")
    parser.add_argument('program', help="For which program you should create the JSON file",
                        choices=["pgd", "prep", "offline", "soda"])

    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit()

    args = parser.parse_args()

    return args.program, args.config, args.path, args.indent, args.system, args.namelist, args.files, args.ecoclimap, \
           args.forc_zs, args.prep_file, args.prep_filetype, args.prep_pgdfile, args.prep_pgdfiletype, args.dtg


if __name__ == "__main__":

    program, settings_file, input_path, indent, system_settings, name_of_namelist, name_of_input_files, \
        name_of_ecoclimap, forc_zs, prep_file, prep_filetype, prep_pgdfile, prep_pgdfiletype, dtg = parse()

    env = {}
    if os.path.exists(settings_file):
        print("Read toml settings from " + settings_file)
        env = toml.load(open(settings_file, "r"))
        print(env)
    else:
        print("Input file does not exist: " + settings_file)
        raise FileNotFoundError

    merged_json_settings, ecoclimap_json, input_for_surfex_json = \
        surfex.set_json_namelist_from_toml_env(program, env, input_path, system_settings, forc_zs, prep_file,
                                               prep_filetype, prep_pgdfile, prep_pgdfiletype, dtg)

    # Namelist settings
    print("\nNamelist: ")
    for key in merged_json_settings:
        print(key, ":", merged_json_settings[key])

    # Dump namelist as json
    merged_json_settings = surfex.nml2ascii(merged_json_settings, name_of_namelist, indent=indent)

    # Input files for SURFEX binary
    print("\nInput files: ", input_for_surfex_json.data)
    json.dump(input_for_surfex_json.data, open(name_of_input_files, "w"), indent=indent)

    # Ecoclimap
    print("\nEcoclimap: ", ecoclimap_json.data)
    json.dump(ecoclimap_json.data, open(name_of_ecoclimap, "w"), indent=indent)

