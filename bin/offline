#!/usr/bin/env python3

import surfex
import sys
import argparse
import os
import json


def parse():
    """Parse the command line input arguments."""
    soda = False
    if str(__file__).endswith("perturbed_offline"):
        desc="Run perturbed Offline SURFEX"
    elif str(__file__).endswith("offline"):
        desc="Run Offline SURFEX" 
    elif str(__file__).endswith("soda"):
        desc="Run SURFEX data assimilation (SODA)"
        soda = True
    else:
        desc="Undefined program description"
    parser = argparse.ArgumentParser(description=desc)

    parser.add_argument('--version', action='version', version='surfex {0}'.format(surfex.__version__))
    parser.add_argument('--wrapper', '-w', type=str, default="", help="Execution wrapper command")
    parser.add_argument('--json', '-j', type=str, nargs="?", required=True, help="A JSON file with run options")
    parser.add_argument('--pgd', type=str, nargs="?", required=True, help="Name of the PGD file")
    parser.add_argument('--prep', type=str, nargs="?", required=True, help="Name of the PREP file")
    parser.add_argument('--force', '-f', action="store_true", help="Force re-creation")
    parser.add_argument('--rte', '-r', required=True, nargs='?')
    parser.add_argument('--ecoclimap', '-e', required=True, nargs='?')
    parser.add_argument('--domain', '-d', required=True, type=str, help="JSON file with domain")
    parser.add_argument('--output', '-o', required=True, nargs='?')
    parser.add_argument('--pert', '-p', type=int, required=False, default=None)
    parser.add_argument('--input', '-i', required=False, default=None, nargs='?', help="JSON file with input")
    parser.add_argument('--archive', '-a', required=False, default=None, nargs='?',
                        help="JSON file with archive output")
    if soda:
        parser.add_argument('--assim_input', required=False, default=None, nargs='?', help="JSON file with assimilation input")
        parser.add_argument('--assim_output', required=False, default=None, nargs='?', help="JSON file with assimilation output")
    else:
        assim_input = None
        assim_output = None
    parser.add_argument('binary', type=str, nargs='?')

    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit()

    args = parser.parse_args()
    if soda:
        assim_input = args.assim_input
        assim_output = args.assim_output
    return args.binary, args.rte, args.wrapper, args.json, args.force, args.output, args.input, args.ecoclimap, \
        args.domain, args.archive, args.pgd, args.prep, assim_input, assim_output, args.pert


if __name__ == "__main__":

    binary, rte, wrapper, json_file, force, output, input_arg, ecoclimap, domain, archive, pgd_file_path, \
        prep_file_path, assim_input, assim_output, pert = parse()

    if os.path.exists(rte):
        my_batch = surfex.BatchJob(json.load(open(rte, "r")), wrapper=wrapper)
    else:
        raise FileNotFoundError

    if os.path.exists(json_file):
        json_settings = json.load(open(json_file, "r"))
    else:
        raise FileNotFoundError

    if os.path.exists(domain):
        my_geo = surfex.json2geo(json.load(open(domain, "r")))
    else:
        raise FileNotFoundError

    if os.path.exists(ecoclimap):
        ecoclimap_file = ecoclimap
    else:
        raise FileNotFoundError

    my_input = None
    if input_arg is not None:
        if os.path.exists(input_arg):
            input_file = input_arg
            my_input = surfex.JsonInputDataFromFile(input_file)
        else:
            raise FileNotFoundError

    my_archive = None
    if archive is not None:
        if os.path.exists(archive):
            my_archive = surfex.JsonOutputDataFromFile(archive)
        else:
            raise FileNotFoundError

    if assim_input is not None:
        if os.path.exists(assim_input):
            assim_input = surfex.JsonInputDataFromFile(assim_input)
        else:
            raise FileNotFoundError

    if assim_output is not None:
        if os.path.exists(assim_output):
            assim_output = surfex.JsonInputDataFromFile(assim_output)
        else:
            raise FileNotFoundError

    assim = None
    if assim_input is not None or assim_output is not None:
        assim = surfex.Assimilation(ass_input=assim_input, ass_output=assim_output)

    if not os.path.exists(output) or force:
        my_settings = surfex.ascii2nml(json_settings)

        # Create input
        my_ecoclimap = surfex.JsonInputDataFromFile(ecoclimap_file)
        my_input = surfex.JsonInputDataFromFile(input_file)

        my_format = my_settings["nam_io_offline"]["csurf_filetype"]
        my_pgdfile = my_settings["nam_io_offline"]["cpgdfile"]
        my_prepfile = my_settings["nam_io_offline"]["cprepfile"]
        my_surffile = my_settings["nam_io_offline"]["csurffile"]

        my_pgdfile = surfex.file.PGDFile(my_format, my_pgdfile, my_geo, input_file=pgd_file_path)
        my_prepfile = surfex.PREPFile(my_format, my_prepfile, my_geo, input_file=prep_file_path)
        surffile = surfex.PREPFile(my_format, my_surffile, my_geo, archive_file=output)
        if pert is None:
            surfex.SURFEXBinary(binary, my_batch, my_prepfile, my_settings, my_ecoclimap, pgdfile=my_pgdfile,
                            assim=assim, surfout=surffile, input=my_input, archive=my_archive)
        else:
            surfex.PerturbedOffline(binary, my_batch, my_prepfile, pert, my_settings, my_ecoclimap,
                                pgdfile=my_pgdfile, surfout=surffile, input=my_input, archive=my_archive, print_namelist=True)

    else:
        print(output + " already exists!")
