#!/usr/bin/env python
import os
import sys
import numpy as np
import argparse
import netCDF4

def main():
    parser = argparse.ArgumentParser(description='Create parameter file for calibration methods (currently OI and override) in gridpp.i The program reads TITAN output and puts observed and CI values into the parameter file. If CI (rep column) is missing in the input, then a default value is used.')
    parser.add_argument('files', help='Netatmo input file', nargs="*")
    parser.add_argument('-o', help='Output file', dest="ofilename", required=True)
    parser.add_argument('-k', metavar="FLAGS", help='Only keep rows with these DQC flags. Comma-separated list accepted.', dest="keep")
    parser.add_argument('-m', default="oi", help='Write parameters for this method (default oi).', dest="method", choices=["oi", "override"])
    parser.add_argument('-p', metavar="PROVIDERS", help='Only keep rows with these providers.  Comma-separated list accepted.', dest="providers")
    parser.add_argument('-latrange', help='Only keep stations within these latitudes (min,max)', dest="latrange")
    parser.add_argument('-lonrange', help='Only keep statoins within these longitudes (min,max)', dest="lonrange")
    parser.add_argument('--add', type=float, default=0, help='Add this value to the values (e.g. to change units)', dest="add")
    parser.add_argument('--multiply', type=float, default=1, help='Multiply this value to the values (e.g. to change units)', dest="multiply")
    parser.add_argument('--override_ci', type=float, help='Override CI values with this value (if -m oi)', dest="override_ci")
    parser.add_argument('--default_ci', default=1, type=float, help='Use this value if CI is missing (if -m oi; default 1)', dest="default_ci")
    parser.add_argument('--debug', help='Show debug information', action="store_true")

    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)

    args = parser.parse_args()

    latrange = [-180, 180]
    lonrange = [-180, 180]
    if args.latrange is not None:
        latrange = [float(x) for x in args.latrange.split(',')]
    if args.lonrange is not None:
        lonrange = [float(x) for x in args.lonrange.split(',')]

    lats = list()
    lons = list()
    elevs = list()
    values = list()
    cis = list()
    for file in args.files:
        ifile = open(file, 'r')
        header = ifile.readline().strip().split(';')
        Ilat = header.index("lat")
        Ilon = header.index("lon")
        Ielev = header.index("elev")
        Ici = None
        if "rep" in header:
            Ici = header.index("rep")
        Ivalue = header.index("value")
        keep = None
        if args.keep is not None:
            keep = [int(q) for q in args.keep.split(',')]
            if "dqc" not in header:
                print("File '%s' missing 'dqc' column. Cannot select based on dqc." % file)
                continue
            Idqc = header.index("dqc")

        providers = None
        if args.providers is not None:
            providers = [int(q) for q in args.providers.split(',')]
            if "prid" not in header:
                print("File '%s' missing 'prid' column. Cannot select based on provider." % file)
                continue
            Iprovider = header.index("prid")

        for line in ifile:
            words = line.strip().split(";")
            lat = float(words[Ilat])
            lon = float(words[Ilon])
            if lat > latrange[0] and lat < latrange[1] and lon > lonrange[0] and lon < lonrange[1]:
                if keep is not None:
                    dqc = int(words[Idqc])
                    if dqc not in keep:
                        continue
                if providers is not None:
                    provider = int(words[Iprovider])
                    if provider not in providers:
                        continue
                lats += [lat]
                lons += [lon]
                elevs += [float(words[Ielev])]
                values += [float(words[Ivalue])]
                ci_value = args.default_ci
                if args.override_ci is not None:
                    ci_value = args.override_ci
                elif Ici is not None:
                    try:
                        ci_value = float(words[Ici])
                    except Exception as e:
                        ci_value = args.default_ci
                cis += [ci_value]

    S = len(lats)
    file = netCDF4.Dataset(args.ofilename, 'w')
    file.createDimension("time")
    file.createDimension("y", S)
    file.createDimension("x", 1)
    Nc = 1
    if args.method == "oi":
        Nc = 2
    file.createDimension("coefficient", Nc)

    vTime = file.createVariable("time", "f8", ("time"))
    vLat = file.createVariable("latitude", "f8", ("y", "x"))
    vLon = file.createVariable("longitude", "f8", ("y", "x"))
    vElev = file.createVariable("altitude", "f8", ("y", "x"))
    vCoeff = file.createVariable("coefficients", "f8", ("time", "y", "x", "coefficient"))

    if S > 0:
        vLat[:] = lats
        vLon[:] = lons
        vElev[:] = elevs
        print("Writing %d stations" % S)
        if args.method == "oi":
            vCoeff[0, :, 0, 0] = ( np.array(values) + args.add ) * args.multiply
            vCoeff[0, :, 0, 1] = np.array(cis)
        elif args.method == "override":
            vCoeff[0, :, 0, 0] = ( np.array(values) + args.add ) * args.multiply
        else:
            raise NotImplementedError
    else:
        print("No stations written to file")

    file.close()


if __name__ == "__main__":
    main()
