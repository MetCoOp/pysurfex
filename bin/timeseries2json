#!/usr/bin/env python3

import argparse
import surfex
from datetime import datetime
import sys


def parse_args(args_in):
    parser = argparse.ArgumentParser("Plot field")
    parser.add_argument('-v', '--varname', dest="varname", type=str, help="Variable name", required=True)
    parser.add_argument('-lons', dest="lons", type=float, nargs="+", help="Longitudes", default=None, required=False)
    parser.add_argument('-lats', dest="lats", type=float, nargs="+", help="Latitudes", default=None, required=False)
    parser.add_argument('-stids', dest="stations", type=str, nargs="+", help="Longitudes", default=None, required=False)
    parser.add_argument('-stations', dest="stationlist", type=str, help="Longitudes", default=None,
                        required=False)
    parser.add_argument('-i', '--filepattern', dest="filepattern", type=str, help="Input file", default="",
                        required=False)
    parser.add_argument('-it', '--inputtype', dest="inputtype", type=str, help="Input type (format)", default="surfex",
                        required=False, choices=["netcdf", "grib1", "grib2", "surfex", "obs"])
    parser.add_argument('-start', dest="start", type=str, help="Start time (YYYYMMDDHH)", required=True)
    parser.add_argument('-end', dest="end", type=str, help="End time (YYYYMMDDHH)", required=True)
    parser.add_argument('-int', dest="interval", type=int, help="Interval in seconds", required=False, default=3600)
    parser.add_argument('-indent', dest="indent", type=int, help="Indent", required=False, default=None)
    parser.add_argument('-fcint', dest="fcint", type=int, help="Interval between analysis in seconds", required=False,
                        default=3*3600)
    parser.add_argument('-file_inc', dest="file_inc", type=int, help="Interval between analysis in seconds",
                        required=False, default=3*3600)
    parser.add_argument('-offset', dest="offset", type=int, help="Offset into next forecast by  seconds",
                        required=False, default=0)
    parser.add_argument('-sfx', dest="sfx_type", type=str, help="Input type for surfex files", default=None,
                        required=False, choices=[None, "forcing", "ascii", "nc", "netcdf", "texte"])
    parser.add_argument('-geo', dest="geo_in", type=str,
                        help="JSON file with geometry needed for some surfex file types",
                        required=False, default=None)
    parser.add_argument('-obs', dest="obs_set", type=str, help="Input type", default=None,
                        required=False, choices=[None, "json", "bufr", "frost", "netatmo", "titan"])
    parser.add_argument('-o', '--output', dest="output", type=str, help="Output image", default=None,
                        required=False)

    if len(args_in) == 0:
        parser.print_help()
        sys.exit()

    return parser.parse_args(args_in)


def timeseries2json(args):
    lons = args.lons
    lats = args.lats
    stations = args.stations
    stationlist = args.stationlist
    starttime = args.start
    endtime = args.end
    interval = args.interval
    varname = args.varname
    inputtype = args.inputtype
    file_inc = args.file_inc
    fcint = args.fcint
    offset = args.offset
    filepattern = args.filepattern
    indent = args.indent
    sfx_type = args.sfx_type
    obs_set = args.obs_set
    start = datetime.strptime(starttime, "%Y%m%d%H")
    end = datetime.strptime(endtime, "%Y%m%d%H")
    geo_in = args.geo_in

    # Get lon and lats from station list
    if lons is None and lats is None:
        if stations is None:
            raise Exception("You must provide a station list if no stations are provided")
        lons, lats = surfex.Observation.get_pos_from_stid(stationlist, stations)

    if len(lons) != len(lats):
        raise Exception("Mismatch in longitudes and latitudes")

    delta = [0.1] * len(lons)
    geo_json = {
        "nam_pgd_grid": {
            "cgrid": "LONLATVAL"
        },
        "nam_lonlatval": {
            "xx": lons,
            "xy": lats,
            "xdx": delta,
            "xdy": delta
        }
    }
    geo = surfex.LonLatVal(geo_json)

    settings = {}
    if inputtype == "surfex":
        settings.update({
            "varname": varname,
            "filetype": sfx_type
        })
    elif inputtype == "obs":
        settings.update({
            "varname": varname,
            "filetype": obs_set,
            "fcint": fcint,
            "file_inc": file_inc,
            "offset": offset,
            "filepattern": filepattern
        })

    conf = {
        varname: {
            inputtype: {
                "converter": {
                    "none": settings
                }
            }
        }
    }

    cache = surfex.Cache(False, 7200)

    # Create var
    converter = "none"
    if geo_in is not None:
        geo_in = surfex.get_geo_object(geo_in)

    ts1 = surfex.TimeSeriesFromConverter(varname, inputtype, conf, geo, converter, start, end, cache=cache,
                                         interval=interval, geo_in=geo_in,
                                         stids_file=stationlist)

    ts1.write_json("ts.json", indent=indent)


if __name__ == "__main__":
    my_args = parse_args(sys.argv[1:])
    timeseries2json(my_args)
