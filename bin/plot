#!/usr/bin/env python3

import matplotlib.pyplot as plt
import json
import argparse
import numpy as np
import surfex
from datetime import datetime
import sys


def parse_args(args_in):
    parser = argparse.ArgumentParser("Plot field")
    parser.add_argument('-d', '--domain', dest="domain", type=str, help="Domain json definition",
                        default=None, required=False)
    parser.add_argument('-v', '--variable', dest="variable", type=str, help="Variable name", required=True)
    parser.add_argument('-i', '--inputfile', dest="inputfile", type=str, help="Input file", default="", required=False)
    parser.add_argument('-ft', '--filetype', dest="filetype", type=str, help="Filetype", default="surfex",
                        required=False, choices=["netcdf", "grib1", "grib2", "surfex"])
    parser.add_argument('-t', '--validtime', dest="validtime", type=str, help="Valid time", default=None, required=False)
    parser.add_argument('-it', '--inputtype', dest="inputtype", type=str, help="Input type", default=None,
                        required=False, choices=[None, "forcing", "ascii", "nc", "netcdf", "texte"])
    parser.add_argument('-if', '--inputformat', dest="inputformat", type=str, help="Input format", default=None,
                        required=False)
    parser.add_argument('-o', '--output', dest="output", type=str, help="Input format", default=None,
                        required=False)
    parser.add_argument('--interpolation', default="none")
    if len(args_in) == 0:
        parser.print_help()
        sys.exit()

    return parser.parse_args(args_in)


if __name__ == "__main__":

    '''
-d /home/trygveasp/revision_control/offline-surfex-forcing/examples/settings/svalbard.json \
-v Tair \
-i /lustre/storeB/users/trygveasp/thredds/snow/forcing/FORCING_2018090106_2018090206.nc \
-ft surfex \
-t 2018090106 \
-it forcing \
-if netcdf
    '''
    args = parse_args(sys.argv[1:])

    domain = args.domain
    validtime = datetime.strptime(args.validtime, "%Y%m%d%H")
    variable = args.variable
    filename = args.inputfile
    filetype = args.filetype
    inputtype = args.inputtype
    fileformat = args.inputformat
    output = args.output

    domain_json = json.load(open(domain, "r"))
    geo = surfex.geo.get_geo_object(domain_json)

    geo_out = None
    field = None
    if filetype == "grib1":
        gribvar = surfex.grib.Grib1Variable(6, "sfc", 0, 0)
        # field, geo_in_file = surfex.grib.Grib(filename).field(gribvar, validtime)
        field, intp = surfex.grib.Grib(filename).points(gribvar, geo, validtime=validtime, interpolation="nearest")
        field = np.reshape(field, [geo.nlons, geo.nlats])

